---
import type { Post, SelectProperty } from '../../lib/interfaces'
import {
  getAllPostsSorted,
  getRankedPosts,
  getAllTags,
  getNumberOfPages,
  getDatabase,
  getAllBlocksByBlockId
} from '../../lib/notion/client'
import { 
  getPostLink,
  extractFirstImage
} from '../../lib/blog-helpers'
import Layout from '../../layouts/Layout.astro'
import NoContents from '../../components/NoContents.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostFeaturedImage from '../../components/PostFeaturedImage.astro'
import PostExcerpt from '../../components/PostExcerpt.astro'
import Pagination from '../../components/Pagination.astro'
import styles from '../../styles/blog.module.css'

// 获取数据库信息（网站标题和描述）
const database = await getDatabase()

// 获取文章数据
// 1. 获取第一页的文章列表
// 2. 获取热门文章（用于侧边栏）
// 3. 获取所有标签
// 4. 获取总页数
const [posts, rankedPosts, tags, numberOfPages] = await Promise.all([
  getAllPostsSorted(),
  getRankedPosts(),
  getAllTags(),
  getNumberOfPages(),
])

// 为每篇文章提取第一张图片
// 注意：这个步骤只在文章没有特色图片或封面图片时执行
await Promise.all(
  posts.map(async (post: Post) => {
    // 如果文章已经有FeaturedImage或Cover，不需要提取第一张图片
    if (post.FeaturedImage || post.Cover) return;
    
    // 获取文章内容块
    try {
      const blocks = await getAllBlocksByBlockId(post.PageId);
      // 提取第一张图片
      const firstImageObject = extractFirstImage(blocks);
      if (firstImageObject) {
        post.FirstImage = firstImageObject;
        console.log(`文章[${post.Title}]提取到第一张图片`);
      }
    } catch (error) {
      console.error(`获取文章[${post.Title}]内容块失败:`, error);
    }
  })
)
---

<Layout 
  title="所有日志" 
  description={database.Description}
  path="/blog"
  ogImage="/default-og-image.png"
  hideSidebar={true}
>
  <div class="blog-posts-container">
    <div class="posts-grid">
      {posts.length === 0 ? (
        <NoContents contents={posts} />
      ) : (
        posts.map((post: Post) => (
          <article class="blog-post">
            <a href={getPostLink(post.Slug)} class="blog-post-link">
              {(post.FeaturedImage?.Url || post.Cover?.Url || post.FirstImage?.Url) && (
                <div class="blog-post-image">
                  <PostFeaturedImage post={post} />
                </div>
              )}
              <div class="blog-post-content">
                <div class="blog-post-header">
                  <PostTitle post={post} enableLink={false} />
                  <PostDate post={post} />
                </div>
                <div class="blog-post-tags">
                  <PostTags post={post} enableLink={true} />
                </div>
                <div class="blog-post-body">
                  <PostExcerpt post={post} />
                </div>
              </div>
            </a>
          </article>
        ))
      )}
    </div>
    {numberOfPages > 1 && (
      <div class="pagination-container">
        <Pagination currentPage={1} numberOfPages={numberOfPages} tag="" />
      </div>
    )}
  </div>
</Layout>

<style>
  /* 重要：容器不要设置内边距，让内部的 posts-grid 来控制边距
   * 这样可以确保文章网格与导航栏的图标对齐
   * 修改时注意不要随意添加 padding
   */
  .blog-posts-container {
    padding: 0;
    max-width: 1200px;
    margin: 0 auto;
  }

  /* 重要：文章网格布局
   * 1. 固定三列布局，不要使用 auto-fit
   * 2. 内边距 1rem 确保与导航栏图标对齐
   * 3. 响应式断点：
   *    - 1024px 以下：两列
   *    - 768px 以下：单列
   * 修改时注意保持这些布局规则
   */
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    margin-top: 2rem;
    padding: 0;
  }

  /* 分页容器样式 */
  .pagination-container {
    display: flex;
    justify-content: center;
    width: 100%;
    margin: 2rem 0;
    padding: 0 1rem;
  }

  /* 文章卡片样式
   * 1. 保持圆角和阴影效果
   * 2. 悬停效果：轻微上浮
   */
  .blog-post {
    background: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
  }

  .blog-post:hover {
    transform: translateY(-4px);
  }

  .blog-post-link {
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  /* 图片容器固定高度，保持一致性 */
  .blog-post-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .blog-post-image :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    border-radius: 12px 12px 0 0 !important; /* 强制覆盖全局样式，只保留上边圆角 */
  }
  
  .blog-post:hover .blog-post-image :global(img) {
    transform: scale(1.05);
  }
  
  /* 内容区域 */
  .blog-post-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .blog-post-header {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  /* 重要：文章标题样式
   * 1. 固定字体大小 16px
   * 2. 保持字体粗细和行高
   * 3. 悬停效果：颜色加深和文字阴影
   * 修改时注意保持这些字体规范
   */
  .blog-post-header :global(.post-title) {
    font-size: 16px;
    font-weight: 600;
    line-height: 1.4;
    margin: 0 0 0.2rem 0;
  }

  .blog-post-header :global(.post-title a) {
    color: #333;
    transition: color 0.3s ease;
  }

  .blog-post:hover .blog-post-header :global(.post-title a) {
    color: #000;
    text-shadow: 0 0 1px rgba(0,0,0,0.1);
  }

  /* 标签样式调整 */
  .blog-post-tags {
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    margin-left: -0.6em; /*圆角看起来偏右，所以改一下左间距达到视觉平衡 */
  }

  .blog-post-tags :global(.post-tag) {
    margin: 0;
    font-size: 12px;
    padding: 0.25rem 0.75rem;
    background: #f5f5f5;
    border-radius: 50%;
    color: #666;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 2.5rem; /* 确保最小宽度 */
    height: 1.5rem; /* 固定高度 */
  }

  /* 重要：文章内容样式
   * 1. 固定字体大小 14px
   * 2. 保持行高和颜色
   * 修改时注意保持这些字体规范
   */
  .blog-post-body {
    font-size: 14px;
    color: #666;
    line-height: 1.5;
    margin-top: auto;
  }

  /* 响应式布局断点
   * 注意：不要随意修改这些断点值
   */
  @media (max-width: 1024px) {
    .posts-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .posts-grid {
      grid-template-columns: 1fr;
    }
  }

  /* 系统字体设置 */
  :root {
    --font-family-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
    --font-family-chinese: "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "WenQuanYi Micro Hei", sans-serif;
  }

  /* 系统字体检测 */
  @supports (font: -apple-system-body) {
    .blog-post-header :global(.post-title), .blog-post-body {
      font-family: "PingFang SC", var(--font-family-sans);
    }
  }

  @supports (-ms-ime-align: auto) {
    .blog-post-header :global(.post-title), .blog-post-body {
      font-family: "Microsoft YaHei", var(--font-family-sans);
    }
  }

  /* 博客列表项样式 */
  .blog-post-item {
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  }
  
  .blog-post-item:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
  }
  
  /* 文章标题样式 */
  .blog-post-title {
    font-size: 1.6rem;
    font-weight: var(--font-semibold);
    margin: 0.5rem 0;
    color: var(--text-primary);
  }
  
  .blog-post-title a {
    color: var(--text-primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  .blog-post-title a:hover {
    color: var(--secondary-color);
  }
  
  /* 文章摘要样式 */
  .blog-post-excerpt {
    color: var(--text-secondary);
    font-weight: var(--font-normal);
    line-height: 1.6;
    margin: 0.8rem 0;
  }
  
  /* 文章元信息样式 */
  .blog-post-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    color: var(--text-tertiary);
    font-size: 0.9rem;
    font-weight: var(--font-normal);
  }
  
  /* 标签筛选区域样式 */
  .tags-filter {
    margin-bottom: 2rem;
    padding: 1rem;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }
  
  .tags-filter h2 {
    font-size: 1.2rem;
    font-weight: var(--font-medium);
    margin: 0 0 1rem;
    color: var(--text-primary);
  }
  
  /* 响应式调整 */
  @media (max-width: 768px) {
    .blog-post-title {
      font-size: 1.4rem;
    }
    
    .blog-post-excerpt {
      font-size: 0.95rem;
    }
    
    .blog-post-meta {
      font-size: 0.85rem;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
  }
</style>
