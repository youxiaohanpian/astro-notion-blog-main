---
import type { SelectProperty } from '../../../../../lib/interfaces.ts'
import { NUMBER_OF_POSTS_PER_PAGE } from '../../../../../server-constants.ts'
import {
  getPostsByTagAndPage,
  getNumberOfPagesByTag,
  getAllTags,
} from '../../../../../lib/notion/client.ts'
import { getPostLink, getTagLink, getPageLink } from '../../../../../lib/blog-helpers.ts'
import Layout from '../../../../../layouts/Layout.astro'
import NoContents from '../../../../../components/NoContents.astro'
import PostDate from '../../../../../components/PostDate.astro'
import PostTags from '../../../../../components/PostTags.astro'
import PostTitle from '../../../../../components/PostTitle.astro'
import PostFeaturedImage from '../../../../../components/PostFeaturedImage.astro'
import PostExcerpt from '../../../../../components/PostExcerpt.astro'
import Pagination from '../../../../../components/Pagination.astro'
import BlogPostsLink from '../../../../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../../../../components/BlogTagsLink.astro'
import styles from '../../../../../styles/blog.module.css'
import '../../../../../styles/notion-color.css'

export async function getStaticPaths() {
  const allTags = await getAllTags()
  const paths = []

  for (const tag of allTags) {
    const numberOfPages = await getNumberOfPagesByTag(tag.name)
    console.log(`标签 "${tag.name}" 共有 ${numberOfPages} 页`)

    // 为每个标签生成所有可能的页码路径
    for (let page = 1; page <= numberOfPages; page++) {
      paths.push({
        params: {
          tag: tag.name,
          page: page.toString(),
        },
      })
    }
  }

  console.log(`生成了 ${paths.length} 个静态路径`)
  return paths
}

const { tag, page } = Astro.params
const pageNum = parseInt(page, 10)
const encodedTag = encodeURIComponent(tag)

// 获取文章和分页信息
const [posts, numberOfPages, tags] = await Promise.all([
  getPostsByTagAndPage(tag, pageNum),
  getNumberOfPagesByTag(tag),
  getAllTags(),
])

// 检查页面是否有效
const isValidPage = pageNum >= 1 && pageNum <= numberOfPages
const shouldRedirect = !isValidPage || (posts.length === 0 && pageNum > 1)

console.log('页面信息:', {
  tag,
  page: pageNum,
  totalPages: numberOfPages,
  postsCount: posts.length,
  isValidPage,
  shouldRedirect
})

// 如果需要重定向，返回重定向信息
if (shouldRedirect) {
  console.log('需要重定向到标签首页')
  return Astro.redirect(getTagLink(tag))
}

const currentTag = posts.length > 0 ? posts[0].Tags.find((t) => t.name === tag) : null

// 准备客户端重定向信息
const redirectInfo = {
  encodedTag,
  currentPage: pageNum,
  pageCount: numberOfPages,
  shouldRedirect
}
---

<Layout
  title={`分类: ${tag} - 第${page}页`}
  description={`${tag}分类下的文章列表 - 第${page}页`}
  path={`/posts/tag/${encodedTag}/page/${page}`}
  ogImage=""
  hideSidebar={true}
  breadcrumbs={[
    { label: '所有日志', href: '/' },
    { label: `分类: ${tag}`, href: getTagLink(tag) },
    { label: `第${page}页`, href: getPageLink(pageNum, tag) }
  ]}
>
  <div class="blog-posts-container" id="tag-posts-container">
    <header>
      <div class="tag-container">
        <span class={`tag ${currentTag?.color}`}>{tag}</span>
      </div>
    </header>

    <div class="posts-grid">
      {console.log('渲染文章列表，文章数量:', posts.length)}
      {console.log('文章数据:', JSON.stringify(posts.map(post => ({
        title: post.Title,
        slug: post.Slug,
        date: post.Date,
        tags: post.Tags,
        excerpt: post.Excerpt,
        hasFeaturedImage: !!post.FeaturedImage,
        hasCover: !!post.Cover,
        hasFirstImage: !!post.FirstImage
      })), null, 2))}
      {posts.length === 0 ? (
        <NoContents contents={posts} />
      ) : (
        posts.map((post) => (
          <article class="blog-post">
            <a href={getPostLink(post.Slug)} class="blog-post-link">
              {(post.FeaturedImage?.Url || post.Cover?.Url || post.FirstImage?.Url) && (
                <div class="blog-post-image">
                  <PostFeaturedImage post={post} />
                </div>
              )}
              <div class="blog-post-content">
                <div class="blog-post-header">
                  <PostTitle post={post} enableLink={false} />
                  <PostDate post={post} />
                </div>
                <div class="blog-post-tags">
                  <PostTags post={post} enableLink={true} />
                </div>
                <div class="blog-post-body">
                  <PostExcerpt post={post} />
                </div>
              </div>
            </a>
          </article>
        ))
      )}
    </div>

    <div class="pagination-container">
      <Pagination
        currentPage={parseInt(page, 10)}
        numberOfPages={numberOfPages}
        tag={tag}
      />
    </div>
  </div>
</Layout>

<script define:vars={{ redirectInfo, posts }}>
  // 页面加载完成后检查是否需要重定向
  document.addEventListener('DOMContentLoaded', () => {
    console.log('页面加载完成，标签页信息:', {
      tag: redirectInfo.encodedTag,
      currentPage: redirectInfo.currentPage,
      totalPages: redirectInfo.pageCount,
      postsCount: posts.length,
      shouldRedirect: redirectInfo.shouldRedirect
    });

    // 检查是否需要重定向（当前页面无内容且不是第一页，或页码超出有效范围）
    if (redirectInfo.shouldRedirect || redirectInfo.currentPage > redirectInfo.pageCount) {
      console.log('需要重定向: 当前页面无内容或页码超出范围');
      window.location.href = `/posts/tag/${redirectInfo.encodedTag}`;
      return;
    }

    // 检查内容是否为空，如果为空并且不是第一页，也进行重定向
    const container = document.getElementById('tag-posts-container');
    if (!container) {
      console.error('找不到文章容器元素！');
      return;
    }

    const postElements = container.querySelectorAll('.blog-post');
    console.log(`DOM中找到了 ${postElements.length} 篇文章，服务端数据有 ${posts.length} 篇文章`);

    if (postElements.length === 0 && redirectInfo.currentPage > 1) {
      console.log('需要重定向: 内容为空且不是第一页');
      window.location.href = `/posts/tag/${redirectInfo.encodedTag}`;
      return;
    }

    // 为所有标签链接添加点击事件，阻止事件冒泡
    document.querySelectorAll('.blog-post-tags .post-tags a').forEach(tag => {
      tag.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    });

    // 检查分页链接是否正确
    const paginationLinks = document.querySelectorAll('.pagination a');
    paginationLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href) {
        console.log('分页链接:', href);
      }
    });
  });
</script>

<style>
  .blog-posts-container {
    padding: 0;
    max-width: 1200px;
    margin: 0 auto;
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    margin-top: 2rem;
    padding: 0;
  }

  @media (max-width: 1024px) {
    .posts-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .posts-grid {
      grid-template-columns: 1fr;
    }
  }

  .tag-container {
    margin: 1.5rem 0;
    text-align: center;
    font-size: 1.2rem;
  }

  .tag {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-weight: 600;
  }

  /* 分页容器 */
  .pagination-container {
    display: flex;
    justify-content: center;
    width: 100%;
    margin: 1rem 0 2rem;
  }

  /* 新增瀑布流布局容器 */
  .masonry-container {
    display: flex;
    justify-content: center;
    width: 100%;
    padding: 0;
    margin: 0;
    max-width: 100%;
  }

  /* 新增瀑布流布局 */
  .masonry-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 固定3列 */
    gap: 1.5rem;
    margin: 2rem 0;
    max-width: 1200px; /* 限制最大宽度 */
    width: 100%;
  }

  /* 调整博客文章卡片样式 */
  .blog-post {
    margin: 0;
    width: 100%;
    border-radius: 12px;
    background: #ffffff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.3s ease, background-color 0.3s ease;
  }

  .blog-post:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
    background-color: #fefefe;
  }

  /* 卡片链接 */
  .blog-post-link {
    display: block;
    width: 100%;
    color: inherit;
    text-decoration: none;
  }

  /* 图片区域 */
  .blog-post-image {
    width: 100%;
    height: 240px;
    overflow: hidden;
    border-radius: 12px 12px 0 0; /* 只保留上边两个圆角 */
  }

  .blog-post-image :global(.post-featured-image) {
    border-radius: 12px 12px 0 0; /* 确保内部容器也有相同的圆角 */
    overflow: hidden;
  }

  .blog-post-image :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    border-radius: 12px 12px 0 0 !important; /* 强制覆盖全局样式，只保留上边圆角 */
  }

  .blog-post:hover .blog-post-image :global(img) {
    transform: scale(1.05);
  }

  /* 内容区域 */
  .blog-post-content {
    padding: 1rem 1.2rem;
  }

  .blog-post-header {
    margin-bottom: 0.4rem;
  }

  .blog-post-header :global(.post-title) {
    font-size: 16px;
    font-weight: 600;
    line-height: 1.4;
    margin: 0 0 0.2rem 0;
  }

  .blog-post-header :global(.post-title a) {
    color: #333;
    transition: color 0.3s ease;
  }

  .blog-post:hover .blog-post-header :global(.post-title a) {
    color: #000;
    text-shadow: 0 0 1px rgba(0,0,0,0.1);
  }

  .blog-post-tags {
    margin-bottom: 0.4rem;
  }

  .blog-post-body {
    font-size: 14px;
    color: #666;
    line-height: 1.5;
  }

  /* 响应式设计 */
  @media (max-width: 1024px) {
    .masonry-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .masonry-grid {
      grid-template-columns: 1fr;
      max-width: 500px;
    }

    .blog-posts-container {
      padding: 0 0.5rem;
    }

    .blog-post-image {
      height: 160px;
    }
  }

  @media (max-width: 480px) {
    .blog-post-image {
      height: 140px;
    }

    .blog-post-content {
      padding: 1rem;
    }

    .blog-post-header :global(.post-title) {
      font-size: 15px;
    }

    .blog-post-body {
      font-size: 13px;
    }
  }

  /* 系统字体设置 */
  :root {
    --font-family-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
    --font-family-chinese: "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "WenQuanYi Micro Hei", sans-serif;
  }

  /* 博客文章容器 */
  .blog-posts-container {
    padding: 0;
    box-sizing: border-box;
    width: 100%;
  }

  /* 系统字体检测 */
  @supports (font: -apple-system-body) {
    .blog-post-header :global(.post-title), .blog-post-body {
      font-family: "PingFang SC", var(--font-family-sans);
    }
  }

  @supports (-ms-ime-align: auto) {
    .blog-post-header :global(.post-title), .blog-post-body {
      font-family: "Microsoft YaHei", var(--font-family-sans);
    }
  }
</style>
