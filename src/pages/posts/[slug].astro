---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
  downloadPageCover,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
  extractFirstImage,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import TableOfContents from '../../components/TableOfContents.astro'
import styles from '../../styles/blog.module.css'

export async function getStaticPaths() {
  try {
    const posts = await getAllPosts();
    return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }));
  } catch (error) {
    console.error('Error fetching posts:', error);
    return [];
  }
}

const { slug } = Astro.params;

let post;
try {
  post = await getPostBySlug(slug);
  if (!post) {
    throw new Error(`Post not found. slug: ${slug}`);
  }
} catch (error) {
  console.error('Error fetching post:', error);
  throw new Error(`Post not found. slug: ${slug}`);
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] = await Promise.all([
  getAllBlocksByBlockId(post.PageId),
  getAllPosts(),
  getRankedPosts(),
  getPosts(5),
  getAllTags(),
  getPostsByTag(post.Tags[0]?.name, 6),
]);

// 提取日志的第一张图片并存储到Post对象中
const firstImageObject = extractFirstImage(blocks);
if (firstImageObject) {
  post.FirstImage = firstImageObject;
  console.log('提取到第一张图片:', firstImageObject.Url);
} else {
  console.log('没有从日志中提取到图片');
}

const fileAttachedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false;
    }
    const imageOrFile = block.Image || block.File;
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url;
  });

// Download files
await Promise.all(
  fileAttachedBlocks
    .map(async (block) => {
      const fileObj = block.Image || block.File;
      if (!fileObj || !fileObj.File || !fileObj.File.ExpiryTime) {
        return Promise.resolve(block);
      }
      
      const expiryTime = fileObj.File.ExpiryTime;
      if (expiryTime && Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block);
      }
      return getBlock(block.Id);
    })
    .map((promise) =>
      promise.then((block) => {
        let url;
        try {
          const fileObj = block.Image || block.File;
          if (fileObj && fileObj.File && fileObj.File.Url) {
            url = new URL(fileObj.File.Url);
          } else {
            throw new Error('Missing file URL');
          }
        } catch (error) {
          console.log('Invalid file URL: ', (block.Image || block.File)?.File?.Url);
          return Promise.reject(error);
        }
        return Promise.resolve(url);
      })
    )
    .map((promise) => promise.then(downloadFile))
);

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug);
const prevPost = allPosts[currentPostIndex + 1];
const nextPost = allPosts[currentPostIndex - 1];

// 筛选出所有标题类型的块
const headingBlocks = blocks.filter(b => 
  ['heading_1', 'heading_2', 'heading_3'].includes(b.Type)
);

const relatedPosts = postsHavingSameTag.filter((p: interfaces.Post) => p.Slug !== post.Slug);

// 准备 OG 图片
let ogImage = '';
// 日志封面图URL
let postCoverURL: string | null = null;

// 优先使用 FeaturedImage
if (post.FeaturedImage && post.FeaturedImage.Url) {
  try {
    const url = new URL(post.FeaturedImage.Url);
    ogImage = new URL(filePath(url), Astro.site || '').toString();
  } catch (error) {
    console.log('Invalid FeaturedImage URL: ', post.FeaturedImage.Url);
  }
}
// 如果没有 FeaturedImage，则使用 Cover
else if (post.Cover && post.Cover.Url) {
  try {
    const url = new URL(post.Cover.Url);
    
    // 如果是Notion默认封面图片，尝试下载
    if (url.hostname === 'www.notion.so' && url.pathname.includes('/images/page-cover/')) {
      await downloadPageCover(url.toString());
    }
    
    const processedPath = filePath(url);
    ogImage = new URL(processedPath, Astro.site || '').toString();
    postCoverURL = url.hostname === 'www.notion.so' ? url.toString() : ogImage; // 使用原始URL或处理后的URL
  } catch (error) {
    console.log('Invalid Cover URL: ', post.Cover.Url);
  }
}
// 如果既没有FeaturedImage也没有Cover，则使用日志中的第一张图片
else if (post.FirstImage && post.FirstImage.Url) {
  try {
    const url = new URL(post.FirstImage.Url);
    ogImage = new URL(filePath(url), Astro.site || '').toString();
  } catch (error) {
    console.log('Invalid FirstImage URL: ', post.FirstImage.Url);
  }
}

---

<Layout
  title={post.Title || ''}
  description={post.Excerpt || ''}
  path={getPostLink(post.Slug || '')}
  ogImage={ogImage}
  postCover={postCoverURL}
  breadcrumbs={[
    { label: '所有日志', href: '/' },
    { label: post.Title || '日志详情', href: getPostLink(post.Slug || '') }
  ]}
>
  <div class="blog-post-detail">
    <TableOfContents headings={headingBlocks} />
    
    <div class="blog-posts-container">
      <PostTags post={post} enableLink={true} />
      <PostTitle post={post} enableLink={false} />
      <PostDate post={post} />
      <PostBody blocks={blocks} />

      <div class="post-actions">
        <button class="share-button" id="shareButton" aria-label="分享日志">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="18" cy="5" r="3"></circle>
            <circle cx="6" cy="12" r="3"></circle>
            <circle cx="18" cy="19" r="3"></circle>
            <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
            <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
          </svg>
          <span>分享</span>
        </button>

        <button class="like-button" id="likeButton" aria-label="点赞日志">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
          </svg>
          <span>点赞</span>
          <span class="like-count" id="likeCount"></span>
        </button>
      </div>

      <footer>
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </footer>
    </div>
  </div>

  <div slot="aside" class={styles.aside}>
    <BlogPostsLink
      heading="同类日志"
      posts={
        relatedPosts.length > 0
          ? relatedPosts
          : recentPosts.filter(p => p.Slug !== post.Slug)
      }
    />
    <BlogPostsLink heading="最新日志" posts={recentPosts} />
    <BlogTagsLink heading="标签分类" tags={tags} />
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // 分享按钮功能
    const shareButton = document.getElementById('shareButton');
    if (shareButton) {
      shareButton.addEventListener('click', () => {
        const url = window.location.href;
        const title = document.title;
        
        // 复制网站标题+链接到剪贴板
        const shareText = `${title}\n${url}`;
        copyToClipboard(shareText, title);
      });
    }

    // 点赞按钮功能
    const likeButton = document.getElementById('likeButton');
    const likeCount = document.getElementById('likeCount');
    
    if (likeButton) {
      // 获取日志slug
      const postSlug = window.location.pathname.split('/').pop();
      const likeKey = `post_like_${postSlug}`;
      
      // 从localStorage获取点赞状态
      let isLiked = localStorage.getItem(likeKey) === 'true';
      
      // 更新初始状态
      if (isLiked) {
        likeButton.classList.add('liked');
      }
      
      // 添加点击事件
      likeButton.addEventListener('click', () => {
        isLiked = !isLiked;
        likeButton.classList.toggle('liked', isLiked);
        
        // 保存点赞状态到localStorage
        localStorage.setItem(likeKey, isLiked.toString());
        
        // 添加点赞动画
        if (isLiked) {
          const icon = likeButton.querySelector('svg');
          if (icon) {
            icon.classList.add('pulse');
            setTimeout(() => icon.classList.remove('pulse'), 600);
          }
        }
      });
    }
  });

  // 复制到剪贴板的辅助函数
  function copyToClipboard(text: string, title: string) {
    navigator.clipboard.writeText(text).then(() => {
      // 显示复制成功提示，包含网站标题
      const tooltip = document.createElement('div');
      tooltip.className = 'copy-tooltip';
      tooltip.innerHTML = `
        <div style="text-align: center;">
          <div style="font-weight: bold; margin-bottom: 4px;">链接已复制</div>
          <div style="font-size: 12px; opacity: 0.9;">${title}</div>
        </div>
      `;
      document.body.appendChild(tooltip);
      
      // 3秒后移除提示
      setTimeout(() => {
        tooltip.classList.add('fade-out');
        setTimeout(() => document.body.removeChild(tooltip), 300);
      }, 3000);
    }).catch(err => {
      console.error('复制失败:', err);
      // 回退方案：使用传统的复制方法
      fallbackCopyToClipboard(text, title);
    });
  }

  // 回退复制方案
  function fallbackCopyToClipboard(text: string, title: string) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
      document.execCommand('copy');
      // 显示复制成功提示
      const tooltip = document.createElement('div');
      tooltip.className = 'copy-tooltip';
      tooltip.innerHTML = `
        <div style="text-align: center;">
          <div style="font-weight: bold; margin-bottom: 4px;">链接已复制</div>
          <div style="font-size: 12px; opacity: 0.9;">${title}</div>
        </div>
      `;
      document.body.appendChild(tooltip);
      
      setTimeout(() => {
        tooltip.classList.add('fade-out');
        setTimeout(() => document.body.removeChild(tooltip), 300);
      }, 3000);
    } catch (err) {
      console.error('回退复制也失败了:', err);
    }
    
    document.body.removeChild(textArea);
  }
</script>

<style>
  .blog-post-detail {
    display: flex;
    gap: 2rem;
    position: relative;
    max-width: 100%;
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-all;
    color: var(--text-primary);
  }
  
  .blog-posts-container {
    flex: 1;
    min-width: 0;
    padding-right: 1rem;
  }
  
  .post-actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid rgba(0, 0, 0, 0.05);/* 线的强度弱化 */
    justify-content: center;
  }
  
  .share-button,
  .like-button {
    background: none;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    color: var(--text-secondary);
    transition: all 0.2s ease;
    background-color: rgba(0, 0, 0, 0.05);
  }
  
  .share-button:hover,
  .like-button:hover {
    background-color: rgba(0, 0, 0, 0.08);
    color: var(--text-primary);
  }
  
  .share-button svg,
  .like-button svg {
    width: 18px;
    height: 18px;
  }

  .liked {
    background-color: rgba(255, 162, 32, 0.15);
    color: var(--accent-color);
  }

  .liked svg {
    fill: var(--accent-color);
    stroke: var(--accent-color);
  }

  .like-count {
    font-size: 0.8rem;
    margin-left: 3px;
  }
  
  /* 响应式调整 */
  @media (max-width: 1220px) {
    .blog-posts-container {
      padding: 0 0.5rem;
    }
  }
  
  @media (max-width: 768px) {
    .blog-post-detail {
      flex-direction: column;
    }
    
    .blog-posts-container {
      padding: 0 0.5rem;
    }
    
    .post-actions {
      margin-top: 1.5rem;
      justify-content: space-around;
    }
    
    .share-button,
    .like-button {
      padding: 0.4rem 0.8rem;
      font-size: 0.85rem;
      flex: 1;
      justify-content: center;
    }
  }
</style>

<style is:global>
  .copy-tooltip {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 14px;
    z-index: 1000;
    transition: opacity 0.3s ease;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    min-width: 200px;
  }
  
  .fade-out {
    opacity: 0;
  }
  
  .pulse {
    animation: pulse 0.6s ease-in-out;
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
  }
</style>

<style>
  .post {
    margin: 0;
    padding-top: 0;
    max-width: 800px;
    word-break: break-word;
  }

  @media (max-width: 1220px) {
    .post {
      padding: 0;
    }
  }

  @media (max-width: 768px) {
    .post {
      padding: 0 1rem;
    }
  }
</style>

