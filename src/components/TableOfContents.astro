---
import type { Block } from '../lib/interfaces.ts'
import { buildHeadingId } from '../lib/blog-helpers.ts'

export interface Props {
  headings: Block[]
}

const { headings } = Astro.props

// 获取标题文本
function getHeadingText(block: Block): string {
  let text = ''
  if (block.Type === 'heading_1' && block.Heading1) {
    text = block.Heading1.RichTexts.map(rt => rt.Text?.Content || '').join('')
  } else if (block.Type === 'heading_2' && block.Heading2) {
    text = block.Heading2.RichTexts.map(rt => rt.Text?.Content || '').join('')
  } else if (block.Type === 'heading_3' && block.Heading3) {
    text = block.Heading3.RichTexts.map(rt => rt.Text?.Content || '').join('')
  }
  return text
}

// 获取标题对象
function getHeadingObject(block: Block) {
  if (block.Type === 'heading_1' && block.Heading1) {
    return block.Heading1
  } else if (block.Type === 'heading_2' && block.Heading2) {
    return block.Heading2
  } else if (block.Type === 'heading_3' && block.Heading3) {
    return block.Heading3
  }
  return null
}

// 获取标题级别
function getHeadingLevel(block: Block): number {
  if (block.Type === 'heading_1') return 1
  if (block.Type === 'heading_2') return 2
  if (block.Type === 'heading_3') return 3
  return 0
}

// 检查是否有标题
const hasHeadings = headings.length > 0
---

{hasHeadings && (
  <div id="table-of-contents" class="table-of-contents collapsed">
    <div class="toc-toggle">
      <span class="toc-icon">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="3" y1="6" x2="21" y2="6"></line>
          <line x1="3" y1="12" x2="21" y2="12"></line>
          <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
      </span>
    </div>
    <div class="toc-container">
      <span class="toc-text">目录</span>
      <nav class="toc-nav">
        <ul class="toc-list">
          {headings.map(heading => {
            const text = getHeadingText(heading)
            const headingObj = getHeadingObject(heading)
            const slug = headingObj ? buildHeadingId(headingObj) : ''
            const level = getHeadingLevel(heading)
            
            return (
              <li class={`toc-item toc-level-${level}`}>
                <a href={`#${slug}`} class="toc-link">
                  {text}
                </a>
              </li>
            )
          })}
        </ul>
      </nav>
    </div>
  </div>
)}

<style>
  .table-of-contents {
    position: fixed;
    bottom: 80px;
    left: 10px;
    z-index: 100;
    transition: all 0.3s ease;
    min-width: 200px;
    max-width: 250px;
  }
  
  .table-of-contents.collapsed .toc-container {
    opacity: 0;
    visibility: hidden;
    transform: translateX(-20px);
  }
  
  .table-of-contents.collapsed .toc-toggle {
    background-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
  }

  .table-of-contents.collapsed .toc-text {
    display: none;
  }
  
  .table-of-contents.fixed {
    top: 50px;
  }
  
  .toc-toggle {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 6px 8px;
    background-color: white;
    border-radius: 6px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    margin-bottom: 10px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid rgba(230, 230, 230, 0.8);
    width: fit-content;
    min-width: 16px;
  }
  
  .toc-toggle:hover {
    background-color: #f5f5f5;
  }

  .toc-toggle:hover .toc-text {
    display: inline-block;
  }
  
  .toc-icon {
    display: flex;
    align-items: center;
    color: #555;
  }
  
  .toc-text {
    font-weight: 600;
    font-size: 0.85rem;
    color: #444;
    opacity: 0;
    transform: translateX(-10px);
    transition: all 0.2s ease;
  }

  .table-of-contents:hover .toc-text {
    opacity: 1;
    transform: translateX(0);
    display: inline-block;
  }
  
  .toc-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(230, 230, 230, 0.8);
    padding: 1rem;
    transition: all 0.3s ease;
    max-height: calc(100vh - 150px);
    overflow-y: auto;
  }
  
  .toc-header {
    font-weight: 600;
    margin-bottom: 0.8rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #eee;
    color: #444;
    font-size: 0.95rem;
    text-align: center;
  }
  
  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .toc-item {
    margin: 0.4rem 0;
    padding-left: 0;
  }
  
  .toc-level-1 {
    font-weight: 500;
    margin-top: 0.8rem;
  }
  
  .toc-level-2 {
    padding-left: 1rem;
    font-size: 0.85rem;
  }
  
  .toc-level-3 {
    padding-left: 2rem;
    font-size: 0.8rem;
    color: #666;
  }
  
  .toc-link {
    display: block;
    color: #555;
    text-decoration: none;
    padding: 0.3rem 0.5rem;
    border-radius: 4px;
    transition: all 0.2s ease;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .toc-link:hover {
    background-color: rgba(0, 0, 0, 0.03);
    color: #111;
  }
  
  .toc-link.active {
    color: #08c;
    font-weight: 600;
    background-color: rgba(0, 136, 204, 0.05);
  }
  
  /* 自定义滚动条 */
  .toc-container::-webkit-scrollbar {
    width: 4px;
  }
  
  .toc-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 2px;
  }
  
  .toc-container::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 2px;
  }
  
  .toc-container::-webkit-scrollbar-thumb:hover {
    background: #aaa;
  }
  
  /* 响应式设计 */
  @media (max-width: 1200px) {
    .table-of-contents {
      position: fixed;
      top: auto;
      bottom: 20px;
      left: 10px;
      max-width: 36px;
      opacity: 0.7;
    }
    
    .table-of-contents:hover {
      opacity: 1;
    }
    
    .table-of-contents.expanded .toc-container {
      max-width: 250px;
    }
    
    .table-of-contents.expanded .toc-text {
      display: inline-block;
      opacity: 1;
      transform: translateX(0);
    }
    
    .table-of-contents.expanded .toc-container {
      max-height: 300px;
    }
  }
  
  @media (max-width: 768px) {
    .table-of-contents {
      bottom: 20px;
      left: 10px;
    }
    
    .toc-container {
      max-width: 220px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocElement = document.getElementById('table-of-contents');
    const tocToggle = tocElement?.querySelector('.toc-toggle');
    
    if (tocElement) {
      // 在桌面端，鼠标悬浮时展开目录
      if (window.innerWidth > 1200) {
        tocElement.addEventListener('mouseenter', () => {
          tocElement.classList.remove('collapsed');
        });
        
        tocElement.addEventListener('mouseleave', () => {
          tocElement.classList.add('collapsed');
        });
      }
      
      // 在移动端，点击切换目录状态
      if (tocToggle) {
        tocToggle.addEventListener('click', () => {
          tocElement.classList.toggle('collapsed');
          tocElement.classList.toggle('expanded');
        });
      }
      
      // 监听滚动，更新目录固定状态
      const header = document.querySelector('.site-header');
      const headerHeight = header ? header.getBoundingClientRect().height : 0;
      
      window.addEventListener('scroll', () => {
        if (window.scrollY > headerHeight) {
          tocElement.classList.add('fixed');
        } else {
          tocElement.classList.remove('fixed');
        }
      });

      // 检查URL中是否有锚点，如果有，滚动到对应位置
      setTimeout(() => {
        if (window.location.hash) {
          const targetId = window.location.hash.substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 100,
              behavior: 'smooth'
            });
          }
        }
      }, 300);
      
      // 点击目录链接时平滑滚动
      const tocLinks = tocElement.querySelectorAll('.toc-link');
      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href')?.substring(1);
          const targetElement = document.getElementById(targetId || '');
          
          if (targetElement) {
            // 修改浏览器URL显示锚点，但不触发默认滚动行为
            history.pushState(null, '', `#${targetId}`);
            
            window.scrollTo({
              top: targetElement.offsetTop - 100,
              behavior: 'smooth'
            });
            
            // 在移动端点击后关闭目录
            if (window.innerWidth <= 1200) {
              tocElement.classList.add('collapsed');
              tocElement.classList.remove('expanded');
            }
          }
        });
      });
    
      // 高亮当前可见的标题
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const id = entry.target.getAttribute('id');
          if (entry.isIntersecting) {
            tocElement.querySelectorAll('.toc-link').forEach(link => {
              link.classList.toggle('active', link.getAttribute('href') === `#${id}`);
            });
          }
        });
      }, { rootMargin: '-80px 0px -80% 0px' });
    
      // 观察所有标题元素
      document.querySelectorAll('h3[id], h4[id], h5[id]').forEach(heading => {
        observer.observe(heading);
      });
    }
  });
</script> 