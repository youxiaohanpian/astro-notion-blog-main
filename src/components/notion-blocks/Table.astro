---
import * as interfaces from '../../lib/interfaces.ts'
import RichText from './RichText.astro'

export interface Props {
  block: interfaces.Block
}

const { block } = Astro.props

// 确保 block.Table 存在
if (!block.Table) {
  throw new Error('Table block is undefined')
}
---

<div class="table">
  <table>
    <tbody>
      {
        block.Table.Rows.map((tableRow: interfaces.TableRow, j: number) => (
          <tr>
            {tableRow.Cells.map((cell: interfaces.TableCell, i: number) => {
              // 修复：提前解构 block.Table，避免多次访问和类型警告
              const { HasRowHeader, HasColumnHeader } = block.Table!;
              if (
                (HasRowHeader && i === 0) ||
                (HasColumnHeader && j === 0)
              ) {
                return (
                  <th>
                    {cell.RichTexts.map((richText: interfaces.RichText) => (
                      <RichText richText={richText} />
                    ))}
                  </th>
                )
              }
              return (
                <td>
                  {cell.RichTexts.map((richText: interfaces.RichText) => (
                    <RichText richText={richText} />
                  ))}
                </td>
              )
            })}
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<style>
  .table {
    width: 100%;
    overflow-x: auto;
    margin: 0.6rem 0;
  }
  .table table {
    margin: 0.6rem 0;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    width: 100%;
  }
  .table th,
  .table td {
    font-weight: normal;
    padding: 0.5em;
    border: 1px solid #ddd;
  }
  .table th {
    background-color: rgba(0, 0, 0, 0.05);
    font-weight: 600;
  }
  
  @media (max-width: 768px) {
    .table {
      margin: 0.5rem 0;
    }
    .table table {
      margin: 0.5rem 0;
    }
  }
</style>
