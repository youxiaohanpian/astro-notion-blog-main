---
---

<div class="search-modal-container">
  <div class="overlay"></div>

  <div class="search-modal">
    <div class="search-prompt">
      <input type="text" placeholder="搜索..." />
    </div>
    <div class="search-result">
      <ul>
        <li class="selected">
          <a href="#">
            <div class="search-result-title"></div>
            <div class="search-result-description"></div>
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

<style>
  div.search-modal-container {
    display: none;
  }
  /* 搜索弹窗的z-index值 */
  div.overlay {
    z-index: 999;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    -webkit-backdrop-filter: blur(3px); /* 先兼容 Safari 9+ 以及所有支持标准属性的现代浏览器 */
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(3px);    /* 再写标准的 */
  }
  /* 搜索弹窗的z-index值 */
  div.search-modal {
    z-index: 1000;
    position: fixed;
    top: 100px;
    left: 20%;
    width: 60%;
    border-radius: 12px;
    background-color: #ffffff;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    overflow: hidden;
  }
  @media (max-width: 640px) {
    div.search-modal {
      left: 5%;
      width: 90%;
    }
  }

  div.search-prompt {
    margin: 0;
    padding: 0;
  }
  div.search-prompt input {
    width: 100%;
    border: 0;
    border-bottom: 1px solid #eee;
    padding: 1rem 1.5rem;
    background-color: #ffffff;
    color: #333;
    font-size: 1.2rem;
    line-height: 1.6rem;
    font-family: var(--font-family-chinese), var(--font-family-sans);
  }
  div.search-prompt input:focus {
    outline: none;
    border-bottom-color: var(--primary-color);
  }
  div.search-prompt input::placeholder {
    color: #999;
  }

  div.search-result {
    max-height: 60vh;
    overflow-y: auto;
  }
  div.search-result ul {
    list-style: none;
    margin: 0;
    padding: 0.5rem 0;
  }
  div.search-result ul > :global(li) {
    margin: 0 0.5rem;
  }
  div.search-result ul > :global(li > a) {
    display: block;
    padding: 0.8rem 1rem;
    border-radius: 8px;
    transition: background-color 0.2s ease;
  }
  div.search-result ul > :global(li > a:hover) {
    background-color: #f5f5f5;
  }
  div.search-result ul > :global(li.selected > a) {
    background-color: #f0f7ff;
    border-left: 3px solid var(--primary-color);
  }

  div.search-result :global(div.search-result-title) {
    padding: 0.1rem 0;
    color: #333;
    font-size: 1.1rem;
    line-height: 1.4rem;
    font-weight: 600;
    font-family: var(--font-family-chinese), var(--font-family-sans);
  }
  div.search-result :global(div.search-result-description) {
    margin: 0.3rem 0 0;
    color: #666;
    font-size: 0.9rem;
    line-height: 1.4rem;
    font-family: var(--font-family-chinese), var(--font-family-sans);
  }
</style>

<script>
  /**
   * @typedef {Object} FeedItem
   * @property {string} title - 文章标题
   * @property {string} link - 文章链接
   * @property {string} [description] - 文章描述（可选）
   * @property {string} [pubDate] - 发布日期（可选）
   */

  let isComposing = false;

  document.addEventListener('DOMContentLoaded', async () => {
    /** @type {Array<FeedItem>} */
    let feedItems = [];
    let fetched = false;

    async function openModal() {
      const modalContainer = document.querySelector('.search-modal-container');
      if (modalContainer) {
        modalContainer.style.display = 'block';
        // 禁止背景滚动
        document.body.style.overflow = 'hidden';
      }
      
      const searchInput = document.querySelector('.search-prompt input');
      if (searchInput) {
        searchInput.focus();
      }

      if (!fetched) {
        await fetchRSS();
      }
      searchAndRender();
    }

    function closeModal() {
      const modalContainer = document.querySelector('.search-modal-container');
      if (modalContainer) {
        modalContainer.style.display = 'none';
        // 恢复背景滚动
        document.body.style.overflow = '';
      }
    }

    function handleKeydown(event) {
      if (event.keyCode === 13) {
        // Enter
        select();
      } else if (event.keyCode === 27) {
        // ESC
        closeModal();
      } else if (event.keyCode === 38) {
        // Up
        selectUp(event);
      } else if (event.keyCode === 40) {
        // Down
        selectDown(event);
      } else {
        searchAndRender();
      }
    }

    function select() {
      const a = document.querySelector('.search-result ul > li.selected a');
      if (a) {
        a.click();
      }
    }

    function selectFirst() {
      const li = document.querySelector('.search-result ul > li:first-child');
      if (li) {
        li.classList.add('selected');
      }
    }

    function selectUp(event) {
      event.preventDefault();

      const ul = document.querySelector('.search-result ul');
      if (!ul) return;
      
      const selected = ul.querySelector('.selected');
      if (selected) {
        selected.classList.remove('selected');

        if (selected.previousElementSibling) {
          selected.previousElementSibling.classList.add('selected');
        } else {
          const lastChild = ul.lastElementChild;
          if (lastChild) {
            lastChild.classList.add('selected');
          }
        }
      } else {
        const lastChild = ul.lastElementChild;
        if (lastChild) {
          lastChild.classList.add('selected');
        }
      }
    }

    function selectDown(event) {
      event.preventDefault();

      const ul = document.querySelector('.search-result ul');
      if (!ul) return;
      
      const selected = ul.querySelector('.selected');
      if (selected) {
        selected.classList.remove('selected');

        if (selected.nextElementSibling) {
          selected.nextElementSibling.classList.add('selected');
        } else {
          const firstChild = ul.firstElementChild;
          if (firstChild) {
            firstChild.classList.add('selected');
          }
        }
      } else {
        const firstChild = ul.firstElementChild;
        if (firstChild) {
          firstChild.classList.add('selected');
        }
      }
    }

    function handleMouseover(event) {
      const target = event.target;
      const ul = target.closest('ul');
      if (!ul) return;
      
      Array.from(ul.children).forEach((element) => {
        element.classList.remove('selected');
      });
      
      const li = target.closest('li');
      if (li) {
        li.classList.add('selected');
      }
    }

    function searchAndRender() {
      const searchInput = document.querySelector('.search-prompt input');
      if (!searchInput) return;

      const text = searchInput.value.trim().toLowerCase();

      let results;
      if (text !== '') {
        results = feedItems.filter(item =>
          (item.title && item.title.toLowerCase().includes(text)) ||
          (item.description && item.description.toLowerCase().includes(text))
        );
        console.log('搜索关键词:', text, '搜索结果数量:', results.length);
      } else {
        results = feedItems;
        console.log('显示所有文章，数量:', feedItems.length);
      }

      renderResults(results);
      selectFirst();
    }

    function renderResults(results) {
      const ul = document.querySelector('.search-result ul');
      if (!ul) return;
      
      ul.innerHTML = '';

      results.forEach((item) => {
        const li = document.createElement('li');
        const a = document.createElement('a');
        const title = document.createElement('div');
        const description = document.createElement('div');

        title.classList.add('search-result-title');
        title.textContent = item.title;
        description.classList.add('search-result-description');
        description.textContent = item.description || '';
        a.href = item.link;

        li.addEventListener('mouseover', handleMouseover);

        a.appendChild(title);
        a.appendChild(description);
        li.appendChild(a);
        ul.appendChild(li);
      });
    }

    async function fetchRSS() {
      try {
        console.log('正在获取 RSS feed...');
        const res = await fetch(`/feed.xml`);
        console.log('RSS feed 响应状态:', res.status);
        
        if (res.status !== 200) {
          console.log('RSS feed 获取失败，状态码:', res.status);
          // 尝试备用路径
          const res2 = await fetch(`/feed`);
          if (res2.status !== 200) {
            throw new Error('Failed to fetch RSS feed from both paths');
          }
          const body = await res2.text();
          console.log('使用备用路径成功获取 RSS feed');
          parseRSSContent(body);
          return;
        }

        const body = await res.text();
        console.log('RSS feed 内容长度:', body.length);
        parseRSSContent(body);
        
      } catch (error) {
        console.error('Error fetching RSS feed:', error);
        // 显示错误信息给用户
        showErrorMessage('搜索功能暂时不可用，请稍后再试');
      }
    }

    function parseRSSContent(body) {
      try {
        const parser = new DOMParser();
        const xml = parser.parseFromString(body, 'text/xml');

        const items = xml.getElementsByTagName('item');
        console.log('找到 RSS items 数量:', items.length);

        Array.from(items).forEach((item) => {
          const titleElement = item.getElementsByTagName('title')[0];
          const linkElement = item.getElementsByTagName('link')[0];
          const descriptionElement = item.getElementsByTagName('description')[0];
          const pubDateElement = item.getElementsByTagName('pubDate')[0];

          if (titleElement && linkElement) {
            feedItems.push({
              title: titleElement.textContent || '',
              link: linkElement.textContent || '',
              description: descriptionElement?.textContent || '',
              pubDate: pubDateElement?.textContent || '',
            });
          }
        });

        console.log('成功加载文章数量:', feedItems.length);
        fetched = true;
      } catch (error) {
        console.error('解析 RSS 内容失败:', error);
        showErrorMessage('解析搜索数据失败');
      }
    }

    function showErrorMessage(message) {
      const ul = document.querySelector('.search-result ul');
      if (ul) {
        ul.innerHTML = `<li><div style="padding: 1rem; text-align: center; color: #666;">${message}</div></li>`;
      }
    }

    const searchButtons = document.getElementsByClassName('open-search-modal');
    Array.from(searchButtons).forEach((element) => {
      element.addEventListener('click', openModal);
    });
    
    const overlay = document.getElementsByClassName('overlay')[0];
    if (overlay) {
      overlay.addEventListener('click', closeModal);
    }
    
    // 监听 composition 事件，保证中文输入体验
    const searchInput = document.querySelector('.search-prompt input');
    if (searchInput) {
      searchInput.addEventListener('compositionstart', () => {
        isComposing = true;
      });
      searchInput.addEventListener('compositionend', () => {
        isComposing = false;
        searchAndRender();
      });
      searchInput.addEventListener('input', () => {
        if (!isComposing) {
          searchAndRender();
        }
      });
    }

    // 移除原有 document.addEventListener('keydown', handleKeydown);
    // 并将回车、上下键等事件绑定到 input 上
    if (searchInput) {
      searchInput.addEventListener('keydown', (event) => {
        if (isComposing) return;
        if (event.keyCode === 13) {
          // Enter
          select();
        } else if (event.keyCode === 27) {
          // ESC
          closeModal();
        } else if (event.keyCode === 38) {
          // Up
          selectUp(event);
        } else if (event.keyCode === 40) {
          // Down
          selectDown(event);
        }
      });
    }
  });
</script>
