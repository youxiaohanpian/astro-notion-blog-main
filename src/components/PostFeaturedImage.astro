---
import type { Post } from '../lib/interfaces.ts'
import { filePath } from '../lib/blog-helpers'

export interface Props {
  post: Post
}

const { post } = Astro.props

let image = ''
// 图片获取优先级：
// 1. FeaturedImage（Notion字段中的图片）
// 2. Cover（在线图库）
// 3. FirstImage（文章内第一张图片）
// 注意：每个优先级都会检查开发环境和生产环境的不同处理方式

// 第一优先级：FeaturedImage（Notion字段中的图片）
if (post.FeaturedImage && post.FeaturedImage.Url) {
  if (import.meta.env.DEV) {
    image = post.FeaturedImage.Url
  } else {
    try {
      image = filePath(new URL(post.FeaturedImage.Url))
    } catch (e) {
      console.error('FeaturedImage URL处理失败:', e);
      image = post.FeaturedImage.Url;
    }
  }
} 
// 第二优先级：Cover（在线图库）
else if (post.Cover && post.Cover.Url) {
  if (import.meta.env.DEV) {
    image = post.Cover.Url
  } else {
    try {
      image = filePath(new URL(post.Cover.Url))
    } catch (e) {
      console.error('Cover URL处理失败:', e);
      image = post.Cover.Url;
    }
  }
}
// 第三优先级：FirstImage（文章内图片）
else if (post.FirstImage && post.FirstImage.Url) {
  if (import.meta.env.DEV) {
    image = post.FirstImage.Url
  } else {
    try {
      image = filePath(new URL(post.FirstImage.Url))
    } catch (e) {
      console.error('FirstImage URL处理失败:', e);
      image = post.FirstImage.Url;
    }
  }
}

// 添加详细的日志信息，用于调试
console.log(`文章[${post.Title}]的图片信息:`, {
  hasFeaturedImage: !!post.FeaturedImage?.Url,
  hasCover: !!post.Cover?.Url,
  hasFirstImage: !!post.FirstImage?.Url,
  finalImage: image || '无图片'
});
---

{/* 只有在有图片时才渲染图片容器
 * 注意：这个条件判断很重要，避免渲染空的图片容器
 */}
{image && (
  <div class="post-featured-image">
    <img 
      src={image} 
      alt="Featured image of the post"
      loading="lazy"
      decoding="async"
      width="800"
      height="400"
    />
  </div>
)}

<style>
  /* 图片容器样式
   * 1. 宽度100%填充父容器
   * 2. 高度100%自适应
   * 3. 使用flex布局居中图片
   * 4. 溢出部分隐藏
   */
  .post-featured-image {
    width: 100%;
    overflow: hidden;
    display: block;
    font-size: 0;
    line-height: 0;
    margin: 0;
    padding: 0;
    border: 0;
  }

  /* 图片样式
   * 1. 块级显示
   * 2. 宽度和高度100%填充容器
   * 3. 使用object-fit: cover确保图片填充且不变形
   */
  .post-featured-image img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    margin: 0;
    padding: 0;
    border: 0;
    vertical-align: bottom;
  }
</style>
